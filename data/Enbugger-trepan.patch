diff --git a/MANIFEST b/MANIFEST
index 0f36cbf..4bc90b4 100644
--- a/MANIFEST
+++ b/MANIFEST
@@ -21,6 +21,7 @@ lib/Enbugger/OnError.pm
 lib/Enbugger/perl5db.pm
 lib/Enbugger/ptkdb.pm
 lib/Enbugger/sdb.pm
+lib/Enbugger/trepan.pm
 Makefile.PL
 MANIFEST			This list of files
 META.yml
@@ -36,4 +37,7 @@ t/nytprof.pl
 t/nytprof.t
 t/Term/Rendezvous.pm
 t/Test/Enbugger.pm
+t/trepantest.cmd
+t/trepantest.pl
+t/trepantest.t
 TODO
diff --git a/README b/README
index c794dcd..a28877e 100644
--- a/README
+++ b/README
@@ -168,6 +168,11 @@ PLUGGABLE DEBUGGERS
         This is the default perl debugger. See also Enbugger::perl5db and
         perl5db.pl.
 
+    trepan
+        This is the Devel::Trepan debugger. See also Devel::Trepan or
+        https://github.com/rocky/Perl-Devel-Trepan.
+
+
   Registering your own debugger
     While I've attempted to register some debuggers by by default, you may
     need to write your own Enbugger::$foo class to register your own
@@ -228,11 +233,3 @@ COPYRIGHT AND LICENCE
     Free Software Foundation (either version 2 or any later version) and the
     Perl Artistic License as published by O’Reilly Media, Inc. Please open
     the files named gpl-2.0.txt and Artistic for a copy of these licenses.
-
-POD ERRORS
-    Hey! The above document had some coding errors, which are explained
-    below:
-
-    Around line 259:
-        You forgot a '=back' before '=head2'
-
diff --git a/lib/Enbugger.pm b/lib/Enbugger.pm
index 9bb908b..69be9a6 100644
--- a/lib/Enbugger.pm
+++ b/lib/Enbugger.pm
@@ -471,6 +471,7 @@ sub import {
 
 BEGIN {
     __PACKAGE__->register_debugger( 'perl5db' );
+    __PACKAGE__->register_debugger( 'trepan' );
     __PACKAGE__->register_debugger( 'NYTProf' );
 }
 # TODO: __PACKAGE__->register_debugger( 'ebug' );
diff --git a/lib/Enbugger.pod b/lib/Enbugger.pod
index fa13755..707ba52 100644
--- a/lib/Enbugger.pod
+++ b/lib/Enbugger.pod
@@ -310,6 +310,12 @@ only the L<perl5db.pl> debugger has received any testing.
 
 This is the default perl debugger. See also L<Enbugger::perl5db> and L<perl5db.pl>.
 
+=item trepan
+
+This is the L<Devel::Trepan> debugger. See also L<Devel::Trepan> or
+L<https://github.com/rocky/Perl-Devel-Trepan>.
+
+
 =cut
 
 #=item ebug
diff --git a/lib/Enbugger/trepan.pm b/lib/Enbugger/trepan.pm
new file mode 100644
index 0000000..82115e1
--- /dev/null
+++ b/lib/Enbugger/trepan.pm
@@ -0,0 +1,123 @@
+package Enbugger::trepan;
+
+# COPYRIGHT AND LICENCE
+#
+# Copyright (C) 2007,2008 WhitePages.com, Inc. with primary
+# development by Joshua ben Jore.
+#
+# This program is distributed WITHOUT ANY WARRANTY, including but not
+# limited to the implied warranties of merchantability or fitness for
+# a particular purpose.
+#
+# The program is free software.  You may distribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation (either version 2 or any later version)
+# and the Perl Artistic License as published by O’Reilly Media, Inc.
+# Please open the files named gpl-2.0.txt and Artistic for a copy of
+# these licenses.
+
+
+=head1 NAME
+
+Enbugger::trepan - subclass for the extraordinary trepanning debugger
+=cut
+
+
+use strict;
+use vars qw( @ISA @Symbols );
+BEGIN { @ISA = 'Enbugger' }
+
+
+
+
+=head1 OVERRIDEN METHODS
+
+=over
+
+=item CLASS-E<gt>_load_debugger
+
+=cut
+
+sub _load_debugger {
+    my ( $class ) = @_;
+
+    $class->_compile_with_nextstate();
+    require Devel::Trepan::Core;
+    $class->_compile_with_dbstate();
+
+    $class->init_debugger;
+
+    return;
+}
+
+
+
+
+
+=item CLASS-E<gt>_stop ( [OPTION_HASH_REF] )
+
+Set to stop at the next stopping point. OPTIONS_HASH_REF is an
+optional hash reference which can be used to things in the debugger.
+
+=cut
+
+1 if $DB::signal;
+sub _stop {
+
+    my ($self, $opts) = @_;
+    $Devel::Trepan::Core::dbgr->awaken($opts);
+
+    # trepan looks for these to stop.
+    $DB::in_debugger = 1;
+    $DB::signal = 2;
+    # Use at least the default debug flags.
+    $^P |= 0x33f;
+    $DB::in_debugger = 0;
+    return;
+}
+
+
+
+
+
+=item CLASS-E<gt>_write( TEXT )
+
+=cut
+
+1 if $DB::OUT;
+sub _write {
+    my $class = shift @_;
+
+    print { $DB::OUT } @_;
+
+    return;
+}
+
+
+
+
+
+=back
+
+=cut
+
+
+
+
+# Load up a list of symbols known to be associated with this
+# debugger. Enbugger, the base class will use this to guess at which
+# debugger has been loaded if it was loaded prior to Enbugger being
+# around.
+1 if %Enbugger::RegisteredDebuggers;
+$Enbugger::RegisteredDebuggers{trepan}{symbols} = [qw[
+    DB
+    sub
+    eval_with_return
+    save
+]];
+
+## Local Variables:
+## mode: cperl
+## mode: auto-fill
+## cperl-indent-level: 4
+## End:
diff --git a/t/trepantest.cmd b/t/trepantest.cmd
new file mode 100644
index 0000000..8c8e611
--- /dev/null
+++ b/t/trepantest.cmd
@@ -0,0 +1,8 @@
+show basename
+show highlight
+where 1
+step 1
+quit! 10
+
+
+
diff --git a/t/trepantest.pl b/t/trepantest.pl
new file mode 100644
index 0000000..1d1332f
--- /dev/null
+++ b/t/trepantest.pl
@@ -0,0 +1,26 @@
+#!/usr/bin/env perl
+use File::Basename; use File::Spec;
+my $test_var = 'trepan';
+my $basename = basename(__FILE__, '.pl');
+my $dirname  = dirname(__FILE__);
+unshift @INC, File::Spec->catfile($dirname, qw(.. blib lib));
+
+my $trepan_profile = File::Spec->catfile($dirname, $basename . '.cmd');
+my $opts = 
+{
+    testing     => $trepan_profile,
+    basename    => 1,
+    readline    => 0,
+    highlight   => 0
+};
+require Enbugger; 
+Enbugger->load_debugger('trepan');
+
+sub five 
+{
+    5;
+}
+
+Enbugger->stop($opts);
+print five, "\n";
+
diff --git a/t/trepantest.t b/t/trepantest.t
new file mode 100644
index 0000000..d6e5974
--- /dev/null
+++ b/t/trepantest.t
@@ -0,0 +1,50 @@
+#!perl
+
+use strict;
+use warnings;
+use English;
+use Test::More;
+
+=head1 DESCRIPTION
+
+This is a basic test of Devel::Trepan
+
+=cut
+
+use File::Basename qw( fileparse basename);
+use File::Spec::Functions qw( catfile );
+use File::Path qw( rmtree );
+
+# Check for the existence of Devel::Trepan before continuing
+#
+system $EXECUTABLE_NAME, '-e', 'exit ! eval { require Devel::Trepan }';
+if ($CHILD_ERROR) {
+    plan( skip_all => "Skipped because Devel::Trepan isn't installed" );
+    exit;
+}
+
+
+# Locate my test script.
+#
+my ( $nm, $dir, $suffix ) = fileparse( $0, '.t' );
+my $script = catfile( $dir, "$nm.pl" );
+
+my $pid = fork();
+if ($pid == 0) {
+    exec $EXECUTABLE_NAME, $script;
+} else {
+    plan();
+    waitpid($pid, 0);
+    is($?>>8, 10);
+    done_testing();
+}
+
+=begin emacs
+
+## Local Variables:
+## mode: cperl
+## mode: auto-fill
+## cperl-indent-level: 4
+## End:
+
+=end emacs
